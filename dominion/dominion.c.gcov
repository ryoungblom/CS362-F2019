        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 248109905 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
248109905:    9:    if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
        1:   10:        return 1;
248109904:   11:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
 88571211:   12:        return -1;
159538693:   13:    return 0;
248109905:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 13074372 returned 100% blocks executed 100%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
 13074372:   23:    int* k = malloc(10 * sizeof(int));
 13074372:   24:    k[0] = k1;
 13074372:   25:    k[1] = k2;
 13074372:   26:    k[2] = k3;
 13074372:   27:    k[3] = k4;
 13074372:   28:    k[4] = k5;
 13074372:   29:    k[5] = k6;
 13074372:   30:    k[6] = k7;
 13074372:   31:    k[7] = k8;
 13074372:   32:    k[8] = k9;
 13074372:   33:    k[9] = k10;
 13074372:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 7873108 returned 100% blocks executed 97%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    int i;
        -:   40:    int j;
        -:   41:    int it;
        -:   42:
        -:   43:    //set up random number generator
  7873108:   44:    SelectStream(1);
  7873108:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
 15746216:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 25%
branch  3 taken 75%
        -:   49:    {
  1968599:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
  5904509:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
129899198:   57:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
1298991980:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
1121856710:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
590450900:   65:        }
 59045090:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
  5904509:   73:    if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   74:    {
  1967555:   75:        state->supplyCount[curse] = 10;
  1967555:   76:    }
  3936954:   77:    else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
  1968684:   79:        state->supplyCount[curse] = 20;
  1968684:   80:    }
        -:   81:    else
        -:   82:    {
  1968270:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
  5904509:   87:    if (numPlayers == 2)
branch  0 taken 33%
branch  1 taken 67%
        -:   88:    {
  1967555:   89:        state->supplyCount[estate] = 8;
  1967555:   90:        state->supplyCount[duchy] = 8;
  1967555:   91:        state->supplyCount[province] = 8;
  1967555:   92:    }
        -:   93:    else
        -:   94:    {
  3936954:   95:        state->supplyCount[estate] = 12;
  3936954:   96:        state->supplyCount[duchy] = 12;
  3936954:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
  5904509:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
  5904509:  102:    state->supplyCount[silver] = 40;
  5904509:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
247989378:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
2479893780:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 92%
branch  1 taken 8%
        -:  109:        {
1145474746:  110:            if (kingdomCards[j] == i)
branch  0 taken 2%
branch  1 taken 98%
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
 47236072:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 25%
branch  3 taken 75%
        -:  114:                {
  5904509:  115:                    if (numPlayers == 2) {
branch  0 taken 33%
branch  1 taken 67%
  1967555:  116:                        state->supplyCount[i] = 8;
  1967555:  117:                    }
        -:  118:                    else {
  3936954:  119:                        state->supplyCount[i] = 12;
        -:  120:                    }
  5904509:  121:                }
        -:  122:                else
        -:  123:                {
 17713527:  124:                    state->supplyCount[i] = 10;
        -:  125:                }
 23618036:  126:                break;
        -:  127:            }
        -:  128:            else    //card is not in the set choosen for the game
        -:  129:            {
1121856710:  130:                state->supplyCount[i] = -1;
        -:  131:            }
1121856710:  132:        }
        -:  133:
118090180:  134:    }
        -:  135:
        -:  136:    ////////////////////////
        -:  137:    //supply intilization complete
        -:  138:
        -:  139:    //set player decks
 47237502:  140:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  141:    {
 17714242:  142:        state->deckCount[i] = 0;
141713936:  143:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:        {
 53142726:  145:            state->deck[i][j] = estate;
 53142726:  146:            state->deckCount[i]++;
 53142726:  147:        }
283427872:  148:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:        {
123999694:  150:            state->deck[i][j] = copper;
123999694:  151:            state->deckCount[i]++;
123999694:  152:        }
 17714242:  153:    }
        -:  154:
        -:  155:    //shuffle player decks
 47237502:  156:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  157:    {
 17714242:  158:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:        {
    #####:  160:            return -1;
        -:  161:        }
 17714242:  162:    }
        -:  163:
        -:  164:    //draw player hands
 47237502:  165:    for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  166:    {
        -:  167:        //initialize hand size to zero
 17714242:  168:        state->handCount[i] = 0;
 17714242:  169:        state->discardCount[i] = 0;
        -:  170:        //draw 5 cards
212570904:  171:         for (j = 0; j < 5; j++)
branch  0 taken 83%
branch  1 taken 17%
        -:  172:        	{
 88571210:  173:        	  drawCard(i, state);
 88571210:  174:        	}
 17714242:  175:    }
        -:  176:
        -:  177:    //set embargo tokens to 0 for all supply piles
330652504:  178:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:    {
159421743:  180:        state->embargoTokens[i] = 0;
159421743:  181:    }
        -:  182:
        -:  183:    //initialize first player's turn
  5904509:  184:    state->outpostPlayed = 0;
  5904509:  185:    state->phase = 0;
  5904509:  186:    state->numActions = 1;
  5904509:  187:    state->numBuys = 1;
  5904509:  188:    state->playedCardCount = 0;
  5904509:  189:    state->whoseTurn = 0;
  5904509:  190:    state->handCount[state->whoseTurn] = 0;
        -:  191:    //int it; move to top
        -:  192:
        -:  193:    //Moved draw cards to here, only drawing at the start of a turn
 70854108:  194:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
 29522545:  195:        drawCard(state->whoseTurn, state);
 29522545:  196:    }
        -:  197:
  5904509:  198:    updateCoins(state->whoseTurn, state, 0);
        -:  199:
  5904509:  200:    return 0;
  7873108:  201:}
        -:  202:
function shuffle called 17825002 returned 100% blocks executed 93%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:    int newDeck[MAX_DECK];
 17825002:  207:    int newDeckPos = 0;
        -:  208:    int card;
        -:  209:    int i;
        -:  210:
 17825002:  211:    if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  212:        return -1;
 17825002:  213:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
390377398:  216:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
177363697:  217:        card = floor(Random() * state->deckCount[player]);
177363697:  218:        newDeck[newDeckPos] = state->deck[player][card];
177363697:  219:        newDeckPos++;
1256357918:  220:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 72%
branch  1 taken 28%
450815262:  221:            state->deck[player][i] = state->deck[player][i+1];
450815262:  222:        }
177363697:  223:        state->deckCount[player]--;
        -:  224:    }
390377398:  225:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
177363697:  226:        state->deck[player][i] = newDeck[i];
177363697:  227:        state->deckCount[player]++;
177363697:  228:    }
        -:  229:
 17825002:  230:    return 0;
 17825002:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:    int card;
    #####:  236:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:    //check if it is the right phase
    #####:  239:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:        return -1;
        -:  242:    }
        -:  243:
        -:  244:    //check if player has enough actions
    #####:  245:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:        return -1;
        -:  248:    }
        -:  249:
        -:  250:    //get card played
    #####:  251:    card = handCard(handPos, state);
        -:  252:
        -:  253:    //check if selected card is an action
    #####:  254:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:        return -1;
        -:  257:    }
        -:  258:
        -:  259:    //play card
    #####:  260:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:    {
    #####:  262:        return -1;
        -:  263:    }
        -:  264:
        -:  265:    //reduce number of actions
    #####:  266:    state->numActions--;
        -:  267:
        -:  268:    //update coins (Treasure cards may be added with card draws)
    #####:  269:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:    return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:    int who;
        -:  276:    if (DEBUG) {
        -:  277:        printf("Entering buyCard...\n");
        -:  278:    }
        -:  279:
        -:  280:    // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:    who = state->whoseTurn;
        -:  283:
    #####:  284:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  285:        if (DEBUG)
        -:  286:            printf("You do not have any buys left\n");
    #####:  287:        return -1;
    #####:  288:    } else if (supplyCount(supplyPos, state) <1) {
branch  0 never executed
branch  1 never executed
        -:  289:        if (DEBUG)
        -:  290:            printf("There are not any of that type of card left\n");
    #####:  291:        return -1;
    #####:  292:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  293:        if (DEBUG)
        -:  294:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:        return -1;
        -:  296:    } else {
    #####:  297:        state->phase=1;
        -:  298:        //state->supplyCount[supplyPos]--;
    #####:  299:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:        state->numBuys--;
        -:  303:        if (DEBUG)
        -:  304:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:    }
        -:  306:
        -:  307:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:    //state->discardCount[who]++;
        -:  309:
    #####:  310:    return 0;
    #####:  311:}
        -:  312:
function numHandCards called 2676518 returned 100% blocks executed 100%
        -:  313:int numHandCards(struct gameState *state) {
  2676518:  314:    return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:    int currentPlayer = whoseTurn(state);
    #####:  319:    return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 2102550 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
  2102550:  323:    return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:    int i;
    #####:  328:    int count = 0;
        -:  329:
    #####:  330:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:    }
        -:  344:
    #####:  345:    return count;
        -:  346:}
        -:  347:
function whoseTurn called 2676518 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
  2676518:  349:    return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:    int k;
        -:  354:    int i;
    #####:  355:    int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:    //Discard hand
    #####:  358:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  359:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:    }
    #####:  362:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:    //Code for determining the player
    #####:  365:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  366:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:    }
        -:  368:    else {
    #####:  369:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:    }
        -:  371:
    #####:  372:    state->outpostPlayed = 0;
    #####:  373:    state->phase = 0;
    #####:  374:    state->numActions = 1;
    #####:  375:    state->coins = 0;
    #####:  376:    state->numBuys = 1;
    #####:  377:    state->playedCardCount = 0;
    #####:  378:    state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:    //int k; move to top
        -:  381:    //Next player draws hand
    #####:  382:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  383:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:    }
        -:  385:
        -:  386:    //Update money
    #####:  387:    updateCoins(state->whoseTurn, state, 0);
        -:  388:
    #####:  389:    return 0;
        -:  390:}
        -:  391:
function isGameOver called 99580 returned 100% blocks executed 84%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:    int i;
        -:  394:    int j;
        -:  395:
        -:  396:    //if stack of Province cards is empty, the game ends
    99580:  397:    if (state->supplyCount[province] == 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  398:    {
    #####:  399:        return 1;
        -:  400:    }
        -:  401:
        -:  402:    //if three supply pile are at 0, the game ends
    99580:  403:    j = 0;
  5178160:  404:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  405:    {
  2489500:  406:        if (state->supplyCount[i] == 0)
branch  0 taken 4%
branch  1 taken 96%
        -:  407:        {
    99580:  408:            j++;
    99580:  409:        }
  2489500:  410:    }
    99580:  411:    if ( j >= 3)
branch  0 taken 0%
branch  1 taken 100%
        -:  412:    {
    #####:  413:        return 1;
        -:  414:    }
        -:  415:
    99580:  416:    return 0;
    99580:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:    int i;
    #####:  422:    int score = 0;
        -:  423:    //score from hand
    #####:  424:    for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:    {
    #####:  426:        if (state->hand[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  427:            score = score - 1;
    #####:  428:        };
    #####:  429:        if (state->hand[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  430:            score = score + 1;
    #####:  431:        };
    #####:  432:        if (state->hand[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  433:            score = score + 3;
    #####:  434:        };
    #####:  435:        if (state->hand[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  436:            score = score + 6;
    #####:  437:        };
    #####:  438:        if (state->hand[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  439:            score = score + 1;
    #####:  440:        };
    #####:  441:        if (state->hand[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  442:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  443:        };
    #####:  444:    }
        -:  445:
        -:  446:    //score from discard
    #####:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  450:            score = score - 1;
    #####:  451:        };
    #####:  452:        if (state->discard[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  453:            score = score + 1;
    #####:  454:        };
    #####:  455:        if (state->discard[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  456:            score = score + 3;
    #####:  457:        };
    #####:  458:        if (state->discard[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  459:            score = score + 6;
    #####:  460:        };
    #####:  461:        if (state->discard[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  462:            score = score + 1;
    #####:  463:        };
    #####:  464:        if (state->discard[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  465:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  466:        };
    #####:  467:    }
        -:  468:
        -:  469:    //score from deck
    #####:  470:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
    #####:  472:        if (state->deck[player][i] == curse) {
branch  0 never executed
branch  1 never executed
    #####:  473:            score = score - 1;
    #####:  474:        };
    #####:  475:        if (state->deck[player][i] == estate) {
branch  0 never executed
branch  1 never executed
    #####:  476:            score = score + 1;
    #####:  477:        };
    #####:  478:        if (state->deck[player][i] == duchy) {
branch  0 never executed
branch  1 never executed
    #####:  479:            score = score + 3;
    #####:  480:        };
    #####:  481:        if (state->deck[player][i] == province) {
branch  0 never executed
branch  1 never executed
    #####:  482:            score = score + 6;
    #####:  483:        };
    #####:  484:        if (state->deck[player][i] == great_hall) {
branch  0 never executed
branch  1 never executed
    #####:  485:            score = score + 1;
    #####:  486:        };
    #####:  487:        if (state->deck[player][i] == gardens) {
branch  0 never executed
branch  1 never executed
    #####:  488:            score = score + ( fullDeckCount(player, 0, state) / 10 );
    #####:  489:        };
    #####:  490:    }
        -:  491:
    #####:  492:    return score;
        -:  493:}
        -:  494:
function getWinners called 0 returned 0% blocks executed 0%
        -:  495:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  496:    int i;
        -:  497:    int j;
        -:  498:    int highScore;
        -:  499:    int currentPlayer;
        -:  500:
        -:  501:    //get score for each player
    #####:  502:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
        -:  504:        //set unused player scores to -9999
    #####:  505:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  506:        {
    #####:  507:            players[i] = -9999;
    #####:  508:        }
        -:  509:        else
        -:  510:        {
    #####:  511:            players[i] = scoreFor (i, state);
        -:  512:        }
    #####:  513:    }
        -:  514:
        -:  515:    //find highest score
    #####:  516:    j = 0;
    #####:  517:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  520:        {
    #####:  521:            j = i;
    #####:  522:        }
    #####:  523:    }
    #####:  524:    highScore = players[j];
        -:  525:
        -:  526:    //add 1 to players who had less turns
    #####:  527:    currentPlayer = whoseTurn(state);
    #####:  528:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  531:        {
    #####:  532:            players[i]++;
    #####:  533:        }
    #####:  534:    }
        -:  535:
        -:  536:    //find new highest score
    #####:  537:    j = 0;
    #####:  538:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  539:    {
    #####:  540:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  541:        {
    #####:  542:            j = i;
    #####:  543:        }
    #####:  544:    }
    #####:  545:    highScore = players[j];
        -:  546:
        -:  547:    //set winners in array to 1 and rest to 0
    #####:  548:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  551:        {
    #####:  552:            players[i] = 1;
    #####:  553:        }
        -:  554:        else
        -:  555:        {
    #####:  556:            players[i] = 0;
        -:  557:        }
    #####:  558:    }
        -:  559:
    #####:  560:    return 0;
        -:  561:}
        -:  562:
function drawCard called 120337995 returned 100% blocks executed 41%
        -:  563:int drawCard(int player, struct gameState *state)
120337995:  564:{   int count = 0;
        -:  565:    int deckCounter;
120337995:  566:    if (state->deckCount[player] <= 0) { //Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  567:      //printf("DECK EMPTY: %d\n", count);
        -:  568:
        -:  569:        //Step 1 Shuffle the discard pile back into a deck
        -:  570:        int i;
        -:  571:        //Move discard to deck
    #####:  572:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  573:            state->deck[player][i] = state->discard[player][i];
    #####:  574:            state->discard[player][i] = -1;
    #####:  575:        }
        -:  576:
    #####:  577:        state->deckCount[player] = state->discardCount[player];
    #####:  578:        state->discardCount[player] = 0;//Reset discard
        -:  579:
        -:  580:        //Shufffle the deck
    #####:  581:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  582:
        -:  583:        if (DEBUG) { //Debug statements
        -:  584:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  585:        }
        -:  586:
    #####:  587:        state->discardCount[player] = 0;
        -:  588:
        -:  589:        //Step 2 Draw Card
    #####:  590:        count = state->handCount[player];//Get current player's hand count
        -:  591:
        -:  592:        if (DEBUG) { //Debug statements
        -:  593:            printf("Current hand count: %d\n", count);
        -:  594:        }
        -:  595:
    #####:  596:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  597:
    #####:  598:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  599:            return -1;
        -:  600:
    #####:  601:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  602:        state->deckCount[player]--;
    #####:  603:        state->handCount[player]++;//Increment hand count
    #####:  604:    }
        -:  605:
        -:  606:    else {
120337995:  607:        int count = state->handCount[player];//Get current hand count for player
        -:  608:        int deckCounter;
        -:  609:        if (DEBUG) { //Debug statements
        -:  610:            printf("Current hand count: %d\n", count);
        -:  611:        }
        -:  612:
120337995:  613:        deckCounter = state->deckCount[player];//Create holder for the deck count
120337995:  614:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
120337995:  615:        state->deckCount[player]--;
120337995:  616:        state->handCount[player]++;//Increment hand count
        -:  617:        //printf("xxCurrent hand count: %d\n", count);
        -:  618:    }
        -:  619:
120337995:  620:    return 0;
120337995:  621:}
        -:  622:
function getCost called 0 returned 0% blocks executed 0%
        -:  623:int getCost(int cardNumber)
        -:  624:{
    #####:  625:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  626:    {
        -:  627:    case curse:
    #####:  628:        return 0;
        -:  629:    case estate:
    #####:  630:        return 2;
        -:  631:    case duchy:
    #####:  632:        return 5;
        -:  633:    case province:
    #####:  634:        return 8;
        -:  635:    case copper:
    #####:  636:        return 0;
        -:  637:    case silver:
    #####:  638:        return 3;
        -:  639:    case gold:
    #####:  640:        return 6;
        -:  641:    case adventurer:
    #####:  642:        return 6;
        -:  643:    case council_room:
    #####:  644:        return 5;
        -:  645:    case feast:
    #####:  646:        return 4;
        -:  647:    case gardens:
    #####:  648:        return 4;
        -:  649:    case mine:
    #####:  650:        return 5;
        -:  651:    case remodel:
    #####:  652:        return 4;
        -:  653:    case smithy:
    #####:  654:        return 4;
        -:  655:    case village:
    #####:  656:        return 3;
        -:  657:    case baron:
    #####:  658:        return 4;
        -:  659:    case great_hall:
    #####:  660:        return 3;
        -:  661:    case minion:
    #####:  662:        return 5;
        -:  663:    case steward:
    #####:  664:        return 3;
        -:  665:    case tribute:
    #####:  666:        return 5;
        -:  667:    case ambassador:
    #####:  668:        return 3;
        -:  669:    case cutpurse:
    #####:  670:        return 4;
        -:  671:    case embargo:
    #####:  672:        return 2;
        -:  673:    case outpost:
    #####:  674:        return 5;
        -:  675:    case salvager:
    #####:  676:        return 4;
        -:  677:    case sea_hag:
    #####:  678:        return 4;
        -:  679:    case treasure_map:
    #####:  680:        return 4;
        -:  681:    }
        -:  682:
    #####:  683:    return -1;
    #####:  684:}
        -:  685:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  686:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  687:{
    #####:  688:    int i = 0;
    #####:  689:    int j = 0;
        -:  690:    int k;
        -:  691:    int x;
        -:  692:    int index;
    #####:  693:    int currentPlayer = whoseTurn(state);
    #####:  694:    int nextPlayer = currentPlayer + 1;
        -:  695:
    #####:  696:    int tributeRevealedCards[2] = {-1, -1};
        -:  697:    int temphand[MAX_HAND];// moved above the if statement
    #####:  698:    int drawntreasure=0;
        -:  699:    int cardDrawn;
    #####:  700:    int z = 0;// this is the counter for the temp hand
    #####:  701:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  702:        nextPlayer = 0;
    #####:  703:    }
        -:  704:
        -:  705:
        -:  706:    //uses switch to select card and perform actions
    #####:  707:    switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  708:    {
        -:  709:    case adventurer:
    #####:  710:        while(drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  711:            if (state->deckCount[currentPlayer] <1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  712:                shuffle(currentPlayer, state);
    #####:  713:            }
    #####:  714:            drawCard(currentPlayer, state);
    #####:  715:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  716:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  717:                drawntreasure++;
        -:  718:            else {
    #####:  719:                temphand[z]=cardDrawn;
    #####:  720:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  721:                z++;
        -:  722:            }
        -:  723:        }
    #####:  724:        while(z-1>=0) {
branch  0 never executed
branch  1 never executed
    #####:  725:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  726:            z=z-1;
        -:  727:        }
    #####:  728:        return 0;
        -:  729:
        -:  730:    case council_room:
        -:  731:        //+4 Cards
    #####:  732:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  733:        {
    #####:  734:            drawCard(currentPlayer, state);
    #####:  735:        }
        -:  736:
        -:  737:        //+1 Buy
    #####:  738:        state->numBuys++;
        -:  739:
        -:  740:        //Each other player draws a card
    #####:  741:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  742:        {
    #####:  743:            if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  744:            {
    #####:  745:                drawCard(i, state);
    #####:  746:            }
    #####:  747:        }
        -:  748:
        -:  749:        //put played card in played card pile
    #####:  750:        discardCard(handPos, currentPlayer, state, 0);
        -:  751:
    #####:  752:        return 0;
        -:  753:
        -:  754:    case feast:
        -:  755:        //gain card with cost up to 5
        -:  756:        //Backup hand
    #####:  757:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  758:            temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  759:            state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  760:        }
        -:  761:        //Backup hand
        -:  762:
        -:  763:        //Update Coins for Buy
    #####:  764:        updateCoins(currentPlayer, state, 5);
    #####:  765:        x = 1;//Condition to loop on
    #####:  766:        while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  767:            if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -:  768:                if (DEBUG)
        -:  769:                    printf("None of that card left, sorry!\n");
        -:  770:
        -:  771:                if (DEBUG) {
        -:  772:                    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  773:                }
    #####:  774:            }
    #####:  775:            else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####:  776:                printf("That card is too expensive!\n");
        -:  777:
        -:  778:                if (DEBUG) {
        -:  779:                    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  780:                }
    #####:  781:            }
        -:  782:            else {
        -:  783:
        -:  784:                if (DEBUG) {
        -:  785:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  786:                }
        -:  787:
    #####:  788:                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  789:                x = 0;//No more buying cards
        -:  790:
        -:  791:                if (DEBUG) {
        -:  792:                    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  793:                }
        -:  794:
        -:  795:            }
        -:  796:        }
        -:  797:
        -:  798:        //Reset Hand
    #####:  799:        for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  800:            state->hand[currentPlayer][i] = temphand[i];
    #####:  801:            temphand[i] = -1;
    #####:  802:        }
        -:  803:        //Reset Hand
        -:  804:
    #####:  805:        return 0;
        -:  806:
        -:  807:    case gardens:
    #####:  808:        return -1;
        -:  809:
        -:  810:
        -:  811://Refactor Mine
        -:  812:    case mine:
    #####:  813:        refactoredMine(j, i, choice1, choice2, currentPlayer, state, handPos);
        -:  814:
        -:  815:    case remodel:
    #####:  816:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  817:
    #####:  818:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  819:        {
    #####:  820:            return -1;
        -:  821:        }
        -:  822:
    #####:  823:        gainCard(choice2, state, 0, currentPlayer);
        -:  824:
        -:  825:        //discard card from hand
    #####:  826:        discardCard(handPos, currentPlayer, state, 0);
        -:  827:
        -:  828:        //discard trashed card
    #####:  829:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  830:        {
    #####:  831:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  832:            {
    #####:  833:                discardCard(i, currentPlayer, state, 0);
    #####:  834:                break;
        -:  835:            }
    #####:  836:        }
        -:  837:
        -:  838:
    #####:  839:        return 0;
        -:  840:
        -:  841:    case smithy:
        -:  842:        //+3 Cards
    #####:  843:        for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  844:        {
    #####:  845:            drawCard(currentPlayer, state);
    #####:  846:        }
        -:  847:
        -:  848:        //discard card from hand
    #####:  849:        discardCard(handPos, currentPlayer, state, 0);
    #####:  850:        return 0;
        -:  851:
        -:  852:    case village:
        -:  853:        //+1 Card
    #####:  854:        drawCard(currentPlayer, state);
        -:  855:
        -:  856:        //+2 Actions
    #####:  857:        state->numActions = state->numActions + 2;
        -:  858:
        -:  859:        //discard played card from hand
    #####:  860:        discardCard(handPos, currentPlayer, state, 0);
    #####:  861:        return 0;
        -:  862:
        -:  863:
        -:  864://Refactor Baron code
        -:  865:    case baron:
    #####:  866:        refactoredBaron(choice1, currentPlayer, state);
        -:  867:
        -:  868:
        -:  869:    case great_hall:
        -:  870:        //+1 Card
    #####:  871:        drawCard(currentPlayer, state);
        -:  872:
        -:  873:        //+1 Actions
    #####:  874:        state->numActions++;
        -:  875:
        -:  876:        //discard card from hand
    #####:  877:        discardCard(handPos, currentPlayer, state, 0);
    #####:  878:        return 0;
        -:  879:
        -:  880:
        -:  881://Refactor Minion
        -:  882:    case minion:
    #####:  883:        refactoredMinion(i, j, choice1, choice2, currentPlayer, state, handPos);
        -:  884:
        -:  885:
        -:  886:    case steward:
    #####:  887:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  888:        {
        -:  889:            //+2 cards
    #####:  890:            drawCard(currentPlayer, state);
    #####:  891:            drawCard(currentPlayer, state);
    #####:  892:        }
    #####:  893:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  894:        {
        -:  895:            //+2 coins
    #####:  896:            state->coins = state->coins + 2;
    #####:  897:        }
        -:  898:        else
        -:  899:        {
        -:  900:            //trash 2 cards in hand
    #####:  901:            discardCard(choice2, currentPlayer, state, 1);
    #####:  902:            discardCard(choice3, currentPlayer, state, 1);
        -:  903:        }
        -:  904:
        -:  905:        //discard card from hand
    #####:  906:        discardCard(handPos, currentPlayer, state, 0);
    #####:  907:        return 0;
        -:  908:
        -:  909:
        -:  910://Refactor Tribute
        -:  911:    case tribute:
    #####:  912:        refactoredTribute(i, tributeRevealedCards, currentPlayer, nextPlayer, state);
        -:  913:
        -:  914:
        -:  915://Refactor Ambassador
        -:  916:    case ambassador:
    #####:  917:      refactoredAmbassador(j, i, choice1, choice2, currentPlayer, state, handPos);
        -:  918:
        -:  919:
        -:  920:    case cutpurse:
        -:  921:
    #####:  922:        updateCoins(currentPlayer, state, 2);
    #####:  923:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  924:        {
    #####:  925:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  926:            {
    #####:  927:                for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  928:                {
    #####:  929:                    if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  930:                    {
    #####:  931:                        discardCard(j, i, state, 0);
    #####:  932:                        break;
        -:  933:                    }
    #####:  934:                    if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  935:                    {
    #####:  936:                        for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  937:                        {
        -:  938:                            if (DEBUG)
        -:  939:                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  940:                        }
    #####:  941:                        break;
        -:  942:                    }
    #####:  943:                }
        -:  944:
    #####:  945:            }
        -:  946:
    #####:  947:        }
        -:  948:
        -:  949:        //discard played card from hand
    #####:  950:        discardCard(handPos, currentPlayer, state, 0);
        -:  951:
    #####:  952:        return 0;
        -:  953:
        -:  954:
        -:  955:    case embargo:
        -:  956:        //+2 Coins
    #####:  957:        state->coins = state->coins + 2;
        -:  958:
        -:  959:        //see if selected pile is in play
    #####:  960:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  961:        {
    #####:  962:            return -1;
        -:  963:        }
        -:  964:
        -:  965:        //add embargo token to selected supply pile
    #####:  966:        state->embargoTokens[choice1]++;
        -:  967:
        -:  968:        //trash card
    #####:  969:        discardCard(handPos, currentPlayer, state, 1);
    #####:  970:        return 0;
        -:  971:
        -:  972:    case outpost:
        -:  973:        //set outpost flag
    #####:  974:        state->outpostPlayed++;
        -:  975:
        -:  976:        //discard card
    #####:  977:        discardCard(handPos, currentPlayer, state, 0);
    #####:  978:        return 0;
        -:  979:
        -:  980:    case salvager:
        -:  981:        //+1 buy
    #####:  982:        state->numBuys++;
        -:  983:
    #####:  984:        if (choice1)
branch  0 never executed
branch  1 never executed
        -:  985:        {
        -:  986:            //gain coins equal to trashed card
    #####:  987:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  988:            //trash card
    #####:  989:            discardCard(choice1, currentPlayer, state, 1);
    #####:  990:        }
        -:  991:
        -:  992:        //discard card
    #####:  993:        discardCard(handPos, currentPlayer, state, 0);
    #####:  994:        return 0;
        -:  995:
        -:  996:    case sea_hag:
    #####:  997:        for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  998:            if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  999:                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1000:                state->deckCount[i]--;
    #####: 1001:                state->discardCount[i]++;
    #####: 1002:                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1003:            }
    #####: 1004:        }
    #####: 1005:        return 0;
        -: 1006:
        -: 1007:    case treasure_map:
        -: 1008:        //search hand for another treasure_map
    #####: 1009:        index = -1;
    #####: 1010:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:        {
    #####: 1012:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1013:            {
    #####: 1014:                index = i;
    #####: 1015:                break;
        -: 1016:            }
    #####: 1017:        }
    #####: 1018:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1019:        {
        -: 1020:            //trash both treasure cards
    #####: 1021:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1022:            discardCard(index, currentPlayer, state, 1);
        -: 1023:
        -: 1024:            //gain 4 Gold cards
    #####: 1025:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1026:            {
    #####: 1027:                gainCard(gold, state, 1, currentPlayer);
    #####: 1028:            }
        -: 1029:
        -: 1030:            //return success
    #####: 1031:            return 1;
        -: 1032:        }
        -: 1033:
        -: 1034:        //no second treasure_map found in hand
    #####: 1035:        return -1;
        -: 1036:    }
        -: 1037:
    #####: 1038:    return -1;
    #####: 1039:}
        -: 1040:
function discardCard called 3176628 returned 100% blocks executed 100%
        -: 1041:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1042:{
        -: 1043:
        -: 1044:    //if card is not trashed, added to Played pile
  3176628: 1045:    if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1046:    {
        -: 1047:        //add card to played pile
  3176628: 1048:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
  3176628: 1049:        state->playedCardCount++;
  3176628: 1050:    }
        -: 1051:
        -: 1052:    //set played card to -1
  3176628: 1053:    state->hand[currentPlayer][handPos] = -1;
        -: 1054:
        -: 1055:    //remove card from player's hand
  3176628: 1056:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 16%
branch  1 taken 84%
        -: 1057:    {
        -: 1058:        //reduce number of cards in hand
   499566: 1059:        state->handCount[currentPlayer]--;
   499566: 1060:    }
  2677062: 1061:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 15%
branch  1 taken 85%
        -: 1062:    {
        -: 1063:        //reduce number of cards in hand
   412910: 1064:        state->handCount[currentPlayer]--;
   412910: 1065:    }
        -: 1066:    else
        -: 1067:    {
        -: 1068:        //replace discarded card with last card in hand
  2264152: 1069:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1070:        //set last card to -1
  2264152: 1071:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1072:        //reduce number of cards in hand
  2264152: 1073:        state->handCount[currentPlayer]--;
        -: 1074:    }
        -: 1075:
  3176628: 1076:    return 0;
        -: 1077:}
        -: 1078:
function gainCard called 700850 returned 100% blocks executed 72%
        -: 1079:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1080:{
        -: 1081:    //Note: supplyPos is enum of choosen card
        -: 1082:
        -: 1083:    //check if supply pile is empty (0) or card is not used in game (-1)
   700850: 1084:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1085:    {
    #####: 1086:        return -1;
        -: 1087:    }
        -: 1088:
        -: 1089:    //added card for [whoseTurn] current player:
        -: 1090:    // toFlag = 0 : add to discard
        -: 1091:    // toFlag = 1 : add to deck
        -: 1092:    // toFlag = 2 : add to hand
        -: 1093:
   700850: 1094:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1095:    {
    #####: 1096:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1097:        state->deckCount[player]++;
    #####: 1098:    }
   700850: 1099:    else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1100:    {
    #####: 1101:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1102:        state->handCount[player]++;
    #####: 1103:    }
        -: 1104:    else
        -: 1105:    {
   700850: 1106:        state->discard[player][ state->discardCount[player] ] = supplyPos;
   700850: 1107:        state->discardCount[player]++;
        -: 1108:    }
        -: 1109:
        -: 1110:    //decrease number in supply pile
   700850: 1111:    state->supplyCount[supplyPos]--;
        -: 1112:
   700850: 1113:    return 0;
   700850: 1114:}
        -: 1115:
function updateCoins called 5904509 returned 100% blocks executed 85%
        -: 1116:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1117:{
        -: 1118:    int i;
        -: 1119:
        -: 1120:    //reset coin count
  5904509: 1121:    state->coins = 0;
        -: 1122:
        -: 1123:    //add coins for each Treasure card in player's hand
 70854108: 1124:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1125:    {
 29522545: 1126:        if (state->hand[player][i] == copper)
branch  0 taken 60%
branch  1 taken 40%
        -: 1127:        {
 17713527: 1128:            state->coins += 1;
 17713527: 1129:        }
 11809018: 1130:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1131:        {
    #####: 1132:            state->coins += 2;
    #####: 1133:        }
 11809018: 1134:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1135:        {
    #####: 1136:            state->coins += 3;
    #####: 1137:        }
 29522545: 1138:    }
        -: 1139:
        -: 1140:    //add bonus
  5904509: 1141:    state->coins += bonus;
        -: 1142:
  5904509: 1143:    return 0;
        -: 1144:}
        -: 1145:
        -: 1146:
        -: 1147://refactord code
        -: 1148:
function refactoredBaron called 1000000 returned 100% blocks executed 100%
        -: 1149:int refactoredBaron (int choice1, int currentPlayer, struct gameState *state) {
        -: 1150:
        -: 1151:  //state->numBuys++;//Increase buys by 1!
  1000000: 1152:  state->numBuys = state->numBuys;
  1000000: 1153:  if (choice1 > 0) { //Boolean true or going to discard an estate
branch  0 taken 50%
branch  1 taken 50%
   500355: 1154:      int p = 0;//Iterator for hand!
   500355: 1155:      int card_not_discarded = 1;//Flag for discard set!
  5395886: 1156:      while(card_not_discarded) {
branch  0 taken 81%
branch  1 taken 19%
  2197588: 1157:          if (state->hand[currentPlayer][p] == estate) { //Found an estate card!
branch  0 taken 14%
branch  1 taken 86%
   299150: 1158:              state->coins += 4;//Add 4 coins to the amount of coins
   299150: 1159:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
   299150: 1160:              state->discardCount[currentPlayer]++;
  2609794: 1161:              for (; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 77%
branch  1 taken 23%
  1005747: 1162:                  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
  1005747: 1163:              }
   299150: 1164:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
   299150: 1165:              state->handCount[currentPlayer]--;
   299150: 1166:              card_not_discarded = 0;//Exit the loop
   299150: 1167:          }
  1898438: 1168:          else if (p > state->handCount[currentPlayer]) {
branch  0 taken 11%
branch  1 taken 89%
        -: 1169:              if(DEBUG) {
        -: 1170:                  printf("No estate cards in your hand, invalid choice\n");
        -: 1171:                  printf("Must gain an estate if there are any\n");
        -: 1172:              }
   201205: 1173:              if (supplyCount(estate, state) > 0) {
branch  0 taken 100%
branch  1 taken 0%
   201205: 1174:                  gainCard(estate, state, 0, currentPlayer);
        -: 1175:
   201205: 1176:                  state->supplyCount[estate]--;//Decrement estates
   201205: 1177:                  if (supplyCount(estate, state) == 0) {
branch  0 taken 20%
branch  1 taken 80%
        -: 1178:                      //isGameOver(state);
        -: 1179:                      //printf("No more estate cards left!");
    39935: 1180:                  }
   201205: 1181:              }
   201205: 1182:              card_not_discarded = 0;//Exit the loop
   201205: 1183:          }
        -: 1184:
        -: 1185:          else {
  1697233: 1186:              p++;//Next card
        -: 1187:          }
        -: 1188:      }
   500355: 1189:  }
        -: 1190:
        -: 1191:  else {
        -: 1192:
   499645: 1193:      if (supplyCount(estate, state) > 0) {
branch  0 taken 100%
branch  1 taken 0%
   499645: 1194:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1195:
   499645: 1196:          state->supplyCount[estate]--;//Decrement Estates
   499645: 1197:          if (supplyCount(estate, state) == 0) {
branch  0 taken 20%
branch  1 taken 80%
    99580: 1198:              isGameOver(state);
    99580: 1199:          }
   499645: 1200:      }
        -: 1201:  }
        -: 1202:
  1000000: 1203:  return 0;
        -: 1204:
        -: 1205:}
        -: 1206:
        -: 1207:
function refactoredMinion called 1000000 returned 100% blocks executed 72%
        -: 1208:int refactoredMinion(int i, int j, int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos) {
        -: 1209:  //+1 action
  1000000: 1210:  state->numActions++;
        -: 1211:
        -: 1212:  //discard card from hand
  1000000: 1213:  discardCard(handPos, currentPlayer, state, 0);
        -: 1214:
  1000000: 1215:if (choice1)
branch  0 taken 50%
branch  1 taken 50%
        -: 1216:  {
        -: 1217:      //state->coins = state->coins + 2;
   500110: 1218:      state->coins = state->coins + 3;
   500110: 1219:  }
   499890: 1220:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100%
branch  1 taken 0%
        -: 1221:  {
        -: 1222:      //discard hand
  5353036: 1223:      while(numHandCards(state) > 0)
branch  0 taken 81%
branch  1 taken 19%
        -: 1224:      {
  2176628: 1225:          discardCard(handPos, currentPlayer, state, 0);
        -: 1226:      }
        -: 1227:
        -: 1228:      //draw 4
  4998900: 1229:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1230:      {
  1999560: 1231:          drawCard(currentPlayer, state);
        -: 1232:          //printf("DRAVING.... cur: %d\n", state->handCount[currentPlayer]);
  1999560: 1233:      }
        -: 1234:
        -: 1235:      //other players discard hand and redraw if hand size > 4
  3999890: 1236:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1237:      {
  1500055: 1238:          if (i != currentPlayer)
branch  0 taken 67%
branch  1 taken 33%
        -: 1239:          {
        -: 1240:              //if ( state->handCount[i] > 4 )
  1000165: 1241:              if ( state->handCount[i] > 5 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1242:              {
        -: 1243:                  //discard hand
    #####: 1244:                  while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1245:                  {
    #####: 1246:                      discardCard(handPos, i, state, 0);
        -: 1247:                  }
        -: 1248:
        -: 1249:                  //draw 4
    #####: 1250:                  for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1251:                  {
    #####: 1252:                      drawCard(i, state);
    #####: 1253:                  }
    #####: 1254:              }
  1000165: 1255:          }
  1500055: 1256:      }
        -: 1257:
   499890: 1258:  }
  1000000: 1259:  return 0;
        -: 1260:
        -: 1261:}
        -: 1262:
        -: 1263:
        -: 1264:
function refactoredAmbassador called 0 returned 0% blocks executed 0%
        -: 1265:int refactoredAmbassador(int j, int i, int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos) {
    #####: 1266:  j = 0;		//used to check if player has enough cards to discard
        -: 1267:
    #####: 1268:  if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1269:  {
    #####: 1270:      return -1;
        -: 1271:  }
        -: 1272:
    #####: 1273:  if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1274:  {
    #####: 1275:      return -1;
        -: 1276:  }
        -: 1277:
    #####: 1278:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1279:  {
    #####: 1280:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1281:      {
    #####: 1282:          j++;
    #####: 1283:      }
    #####: 1284:  }
    #####: 1285:  if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1286:  {
    #####: 1287:      return -1;
        -: 1288:  }
        -: 1289:
        -: 1290:  if (DEBUG)
        -: 1291:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1292:
        -: 1293:  //increase supply count for choosen card by amount being discarded
        -: 1294:  //state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
    #####: 1295:  state->supplyCount[state->hand[currentPlayer][choice1]] -= choice2;
        -: 1296:
        -: 1297:  //each other player gains a copy of revealed card
        -: 1298:  //for (i = 0; i < state->numPlayers; i++)
    #####: 1299:  for (i = 1; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1300:  {
    #####: 1301:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1302:      {
    #####: 1303:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1304:      }
    #####: 1305:  }
        -: 1306:
        -: 1307:  //discard played card from hand
    #####: 1308:  discardCard(handPos, currentPlayer, state, 0);
        -: 1309:
        -: 1310:  //trash copies of cards returned to supply
    #####: 1311:  for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1312:  {
    #####: 1313:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1314:      {
    #####: 1315:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1316:          {
    #####: 1317:              discardCard(i, currentPlayer, state, 1);
    #####: 1318:              break;
        -: 1319:          }
    #####: 1320:      }
    #####: 1321:  }
        -: 1322:
    #####: 1323:  return 0;
    #####: 1324:}
        -: 1325:
        -: 1326:
        -: 1327:
function refactoredTribute called 1000000 returned 100% blocks executed 100%
        -: 1328:int refactoredTribute(int i, int tributeRevealedCards[], int currentPlayer, int nextPlayer, struct gameState *state) {
  1000000: 1329:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 8%
branch  1 taken 92%
    83479: 1330:      if (state->deckCount[nextPlayer] > 0) {
branch  0 taken 33%
branch  1 taken 67%
    27864: 1331:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    27864: 1332:          state->deckCount[nextPlayer]--;
    27864: 1333:      }
    55615: 1334:      else if (state->discardCount[nextPlayer] > 0) {
branch  0 taken 50%
branch  1 taken 50%
    27594: 1335:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    27594: 1336:          state->discardCount[nextPlayer]--;
    27594: 1337:      }
        -: 1338:      else {
        -: 1339:          //No Card to Reveal
        -: 1340:          if (DEBUG) {
        -: 1341:              printf("No cards to reveal\n");
        -: 1342:          }
        -: 1343:      }
    83479: 1344:  }
        -: 1345:
        -: 1346:  else {
   916521: 1347:      if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 12%
branch  1 taken 88%
   664074: 1348:          for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 taken 67%
branch  1 taken 33%
   221277: 1349:              state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
   221277: 1350:              state->deckCount[nextPlayer]++;
   221277: 1351:              state->discard[nextPlayer][i] = -1;
   221277: 1352:              state->discardCount[nextPlayer]--;
   221277: 1353:          }
        -: 1354:
   110760: 1355:          shuffle(nextPlayer,state);//Shuffle the deck
   110760: 1356:      }
   916521: 1357:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
   916521: 1358:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1359:      //state->deckCount[nextPlayer]--;
   916521: 1360:      state->deckCount[nextPlayer]++;
   916521: 1361:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
   916521: 1362:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
   916521: 1363:      state->deckCount[nextPlayer]--;
        -: 1364:  }
        -: 1365:
  1000000: 1366:  if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 97%
branch  1 taken 3%
   972135: 1367:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
   972135: 1368:      state->playedCardCount++;
   972135: 1369:      tributeRevealedCards[1] = -1;
   972135: 1370:  }
        -: 1371:
  8000000: 1372:  for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25%
  8926108: 1373:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
    73809: 1374:          state->coins += 1;
    73809: 1375:      }
        -: 1376:
 14386566: 1377:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 99%
branch  5 taken 1%
branch  6 taken 99%
branch  7 taken 1%
branch  8 taken 1%
branch  9 taken 99%
   122340: 1378:          drawCard(currentPlayer, state);
   122340: 1379:          drawCard(currentPlayer, state);
   122340: 1380:      }
        -: 1381:      else { //Action Card
  2803851: 1382:          state->numActions = state->numActions + 2;
        -: 1383:      }
  3000000: 1384:  }
        -: 1385:
  1000000: 1386:  return 0;
        -: 1387:}
        -: 1388:
        -: 1389:
function refactoredMine called 0 returned 0% blocks executed 0%
        -: 1390:int refactoredMine(int j, int i, int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos) {
    #####: 1391:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1392:
    #####: 1393:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1394:  {
    #####: 1395:      return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1399:  {
    #####: 1400:      return -1;
        -: 1401:  }
        -: 1402:
        -: 1403:  //if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    #####: 1404:  if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1405:  {
    #####: 1406:      return -1;
        -: 1407:  }
        -: 1408:
    #####: 1409:  gainCard(choice2, state, 2, currentPlayer);
    #####: 1410:  gainCard(choice2, state, 2, currentPlayer+1);
        -: 1411:
        -: 1412:  //discard card from hand
    #####: 1413:  discardCard(handPos, currentPlayer, state, 0);
        -: 1414:
        -: 1415:  //discard trashed card
        -: 1416:  //for (i = 0; i < state->handCount[currentPlayer]; i++)
    #####: 1417:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1418:  {
    #####: 1419:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1420:      {
    #####: 1421:          discardCard(i, currentPlayer, state, 0);
    #####: 1422:          break;
        -: 1423:      }
    #####: 1424:  }
        -: 1425:
    #####: 1426:  return 0;
    #####: 1427:}
        -: 1428:
        -: 1429://end of dominion.c
